#!/usr/bin/env python3
#
# Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# This software is distributed under the terms of the MIT License.
#
"""
    Command-line script for uploading, monitoring, and reporting googletest
    binaries in parallel.
"""

import argparse
import logging
import asyncio
import sys
import typing


async def _run(args: argparse.Namespace) -> int:  # noqa: C901

    import nanaimo

    uploader = nanaimo.ProgramUploaderJLink(args.jlink_script)
    parser = nanaimo.GTestParser(args.test_timeout_seconds)

    with nanaimo.ConcurrentUartMonitor.new_default(args.port, args.port_speed) as monitor:
        result = await asyncio.wait_for(uploader.upload(), timeout=args.upload_timeout_seconds)
        if 0 == result:
            result = await parser.read_test(monitor)
    return result


class _LazyVersionAction(argparse._VersionAction):
    '''
    Changes argparse._VersionAction so we only load nanaimo.version
    if the --version action is requested.
    '''

    def __call__(self,
                 parser: argparse.ArgumentParser,
                 namespace: argparse.Namespace,
                 values: typing.Any,
                 option_string: typing.Optional[str] = None) -> None:
        from nanaimo.version import __version__
        version_string = '.'.join(map(str, __version__))
        parser._print_message(version_string, sys.stdout)
        parser.exit()


def _make_parser() -> argparse.ArgumentParser:
    """
        Defines the command-line interface. Provided as a separate factory method to
        support sphinx-argparse documentation.
    """

    epilog = '''**Example Usage**::

    nait --port /dev/serial/by-id/usb-FTDI_TTL232R_BLAH_port0 --port-speed 115200 -vv test_math_saturation_loadfile_swd.jlink

----
'''

    parser = argparse.ArgumentParser(
        description='Run googletest binaries on a microcontroller.',
        epilog=epilog,
        formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument('--version', action=_LazyVersionAction)

    parser.add_argument('--verbose', '-v', action='count',
                        help='verbosity level (-v, -vv)')

    parser.add_argument('--port',
                        help='The port to monitor.')

    parser.add_argument('--port-speed', '-b', help='the speed of the port (e.g. baud rate for serial ports).')

    parser.add_argument('--test-timeout-seconds',
                        default='30',
                        type=float,
                        help='''Test will be killed and marked as a failure after
                                 waiting for a result for this amount of time.''')

    parser.add_argument('--upload-timeout-seconds',
                        default='20',
                        type=float,
                        help='''The upload will be killed and an error returned
                                after waiting for the upload to complete for this
                                amount of time.''')

    parser.add_argument('jlink_script',
                        help='The googletest binary to flash, run, and report on.')

    return parser


async def main() -> int:
    """
        Main entry point for this program.
    """

    #
    # Parse the command-line arguments.
    #
    args = _make_parser().parse_args()

    #
    # Setup Python logging.
    #
    fmt = '%(message)s'
    level = {0: logging.WARNING, 1: logging.INFO,
             2: logging.DEBUG}.get(args.verbose or 0, logging.DEBUG)
    logging.basicConfig(stream=sys.stderr, level=level, format=fmt)

    return await _run(args)


if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    sys.exit(loop.run_until_complete(main()))
